# Main function doing the import via API is createAllTopics (executed at the end of this script). If commented, only initialization and scan of already existing topics is executed (initClient,initAllTopics) and nothing is imported.

from pydiscourse import DiscourseClient
import json
import os
import shutil
import requests
import sys
import time
import datetime

# global variables
# set >>>>>>
TOPIC_CREATION_TIME_STRING = "1.1.2018" # d.m.yyyy 
MOVE_DONE_MD_FILES = True
UPDATE_OPEN_TOPICS = True
UPDATE_CLOSED_TOPICS = True
# <<<<<< set
ENVIRONMENT = sys.argv[1] # LOCAL / PROD
SOURCE_DIR = "import/source"
DONE_DIR = "import_DONE"
ALL_TOPICS = ""
CREATED_OR_UPDATED_TOPICS = 0
TOPIC_CREATION_TIME_TIMESTAMP = time.mktime(datetime.datetime.strptime(TOPIC_CREATION_TIME_STRING, "%d.%m.%Y").timetuple())

print ("ENVIRONMENT = " + ENVIRONMENT)

# set >>>>>>
# environment variables
if ENVIRONMENT.upper() == "LOCAL":
	API_HOST = 'http://localhost:4200'
	API_USERNAME = 'martin.zakostelsky'
	API_KEY = 'TODO_API_KEY'
	API_USERNAME_CHANGE_TIMESTAMP = API_USERNAME
	API_KEY_CHANGE_TIMESTAMP = API_KEY
	CATEGORY_NAME = "Origam Documentation"
	CATEGORY_SLUG = "origam-documentation"
	CATEGORY_ID = 0
	TAGS = ["pending-review"]
elif ENVIRONMENT.upper() == "PROD":
	API_HOST = 'https://community.origam.com'
	API_USERNAME = 'system'
	API_KEY = 'TODO_API_KEY'
	API_USERNAME_CHANGE_TIMESTAMP = API_USERNAME
	API_KEY_CHANGE_TIMESTAMP = API_KEY
	CATEGORY_NAME = "docs"
	CATEGORY_SLUG = "docs"
	CATEGORY_ID = 8
	TAGS = ["pending-review"]
else:
	print ("Not implemented: " + ENVIRONMENT)
# <<<<<< set

# ---------------------------------------------------------------------------------------
def initClient(_printSummary = False, _printAll = False):
	global client
	global CATEGORY_ID

	client = DiscourseClient(
		host = API_HOST,
		api_username = API_USERNAME,
		api_key = API_KEY)
	
	# get category
	if CATEGORY_ID == 0:
		CATEGORY_ID = getCategoryByName(CATEGORY_NAME)['id']
	print ("CATEGORY_ID = " + str(CATEGORY_ID))
	
# ---------------------------------------------------------------------------------------
def initAllTopics(_printSummary = False, _printAll = False, _onlyPage = -1):
	#if ENVIRONMENT.upper() != "LOCAL":
	#	return
	
	global ALL_TOPICS
	
	ALL_TOPICS = getAllTopics(_printSummary = _printSummary, _printAll = _printAll, _onlyPage = _onlyPage)
	
	print("ALL_TOPICS size = " + str(len(ALL_TOPICS)))
	print("")
	
# ---------------------------------------------------------------------------------------
def callRequest(_method, _uri, _params = ""):
	_headers = {'Api-Key': API_KEY}
	_headersWithUsername = {'Api-Key': API_KEY,'Api-Username': API_USERNAME}
	#_headersTimestamp = {'Api-Key': API_KEY_CHANGE_TIMESTAMP,'Api-Username': API_USERNAME_CHANGE_TIMESTAMP}
	_headersTimestamp = {'Api-Key': API_KEY_CHANGE_TIMESTAMP}
	_fullUri = API_HOST + '/' + _uri
	
	if _method.upper() == 'GET':
		_request = requests.get(url = _fullUri, headers = _headers)
	elif _method.upper() == 'POST':
		_request = requests.post(url = _fullUri, headers = _headers)
	elif _method.upper() == 'PUT': # TODO PUT_TIMESTAMP
		_request = requests.put(url = _fullUri, headers = _headersTimestamp, params = _params)
	else:
		raise Exception('Unsupported method: ' + _method)
		
	if _request.status_code == 200:
		return _request.json()
	else:
		print ("------------------------")
		print (_request.content)
		print ("------------------------")
		printJson (_request.json())
		print ("------------------------")
		raise Exception('Query failed and return code is {}.'.format(_request.status_code))
		
# ---------------------------------------------------------------------------------------
def printJson(_json):
	print (json.dumps(_json, indent=4, sort_keys=False))
	
# ---------------------------------------------------------------------------------------
def readFile(_fileName):
	f = open(_fileName)
	_result = f.read()
	f.close()
	
	return _result

# ---------------------------------------------------------------------------------------
# get first written of topic
def getTopicByTitle(_title, _print = False):
	for topic in ALL_TOPICS:
		if topic['title'] == _title:
			if _print == True:
				printJson (topic)
			return topic

# ---------------------------------------------------------------------------------------
def getAllTopics(_printSummary = False, _printAll = False, _onlyPage = -1):
	_result = None
	_page = 0
	_foundTopics = 0
	
	if _onlyPage >= 0:
		_page = _onlyPage
	
	if _printSummary == True:
		print("--------------------------------------")
	
	while True:
		if CATEGORY_ID <= 0:
			_response = client._get("/latest.json?page=" + str(_page))
		else:
			_response = client._get("/c/" + CATEGORY_SLUG + "/" + str(CATEGORY_ID) + "/l/latest.json?page=" + str(_page))
			
		# _response = client._get("/latest.json?page=" + str(_page))
		# _response = callRequest(_method = 'GET',_uri = "/latest.json?page=" + str(_page))
		_topics = _response['topic_list']['topics']
		_perPage = int(_response['topic_list']['per_page'])
		
		_foundTopics += len(_topics)		
		
		if len(_topics) == 0:
			break
		
		if _printSummary == True:
			for topic in _topics:
				print (
					str(topic['id']) + ": \""
					+ str(topic['title']) + "\""
				)
				
		print ("Found topics: " + str(_foundTopics) + " (page = " + str(_page) + ")")
			
		if _result == None:
			_result = _topics
		else:
			_result = _result + _topics
			
		_page = _page + 1
		
		if _onlyPage >= 0:
			break
	
	if _printAll == True:
		printJson(_result)
		
	if _printSummary == True:
		print("------")
		print(str(len(_result)) + " topics loaded")
		print("--------------------------------------")
	 		
	return _result

# ---------------------------------------------------------------------------------------
def createOrUpdateTopicFromFile(_fileName, _forceUpdate = False, _manualTopicId = 0, _print = False):
	global CREATED_OR_UPDATED_TOPICS
	
	_baseFileName = os.path.basename(_fileName)
	_topicTitle = os.path.splitext(_baseFileName)[0]
	
	# clean title
	_topicTitle = _topicTitle.replace("-"," ").strip()
	_topicTitle = _topicTitle.replace("  "," ").replace("  "," ").replace("  "," ")
	if _topicTitle.startswith("AS ") and "Functions" not in _topicTitle:
		_topicTitle = "AS:" + _topicTitle[3:]
	
	_content = readFile(_fileName)
	_topic = getTopicByTitle(_topicTitle,_print)
	
	if (_topic is not None) or (_manualTopicId > 0):
		if _manualTopicId > 0:
			_topicId = _manualTopicId
			_closed = False
		else:
			_topicId = _topic['id']
			_closed = _topic['closed']
		
		if _closed == True and UPDATE_CLOSED_TOPICS == False:
			# copy .md file
			print("--- CLOSED topic " + str(_topicId) + ": \"" + _topicTitle + "\"")
		elif (_closed == True and UPDATE_CLOSED_TOPICS == True) or (_closed == False and (UPDATE_OPEN_TOPICS == True or _forceUpdate == True)):
			print("--- UPDATING topic " + str(_topicId) + ": \"" + _topicTitle + "\"")
			_postId = client._get("/t/" + str(_topicId) + "/posts.json")['post_stream']['posts'][0]['id']
			CREATED_OR_UPDATED_TOPICS += 1
			client.update_post(
				post_id = _postId,
				content = _content
			)
		else:
			 print("--- SKIP, already exists: " + _topicTitle)
	else:
		print("Creating topic \"" + _topicTitle + "\"")
		CREATED_OR_UPDATED_TOPICS += 1
		_result = client.create_post(
			content = _content,
			category_id = CATEGORY_ID,
			topic_id = None,
			title = _topicTitle,
			tags = TAGS
		)
		_topicId = _result['topic_id']
		
	# print ("TopicId: " + str(_topicId));
	
	# set topic timestamp
	changeTopicTimestamp(_topicId,TOPIC_CREATION_TIME_TIMESTAMP)
	
	
	if MOVE_DONE_MD_FILES == True:
		print ("Moving done file " + _fileName + " to " + DONE_DIR + "/" + _baseFileName)
		shutil.move(_fileName, DONE_DIR + "/" + _baseFileName)
		

# ---------------------------------------------------------------------------------------
def createAllTopics(_print = False):
	_allFiles = os.walk(SOURCE_DIR)
	_allFilesCount = 0
	_fileCount = 0
	
	for _subdir, _dirs, _files in _allFiles:
		_allFilesCount += len(_files)
		_fileNumber = 0
		for _file in _files:
			_fileNumber += 1
			if _file.endswith(".md"):
				_fileCount = _fileCount + 1
				_fileFullName = os.path.join(_subdir, _file)
				
				# print ("[" + str(_fileNumber) + "/" + str(_allFilesCount) + "] " + _fileFullName)
				createOrUpdateTopicFromFile(_fileFullName, False, _print)
	
	print (str(CREATED_OR_UPDATED_TOPICS) + " topics created/updated")

# ---------------------------------------------------------------------------------------
def getCategoryByName(_categoryName):
	_categories = client.categories();
	
	for _category in _categories:
		if _category['name'] == _categoryName:
			return _category

# ---------------------------------------------------------------------------------------
def deleteAllTopicsInCategory(_categoryId):
	if ENVIRONMENT.upper() != "LOCAL":
		print ("Cannot run deleteAllTopicsInCategory for prod")
		return
	
	for _topic in ALL_TOPICS:
		if _topic['category_id'] == _categoryId:
			_topicId = _topic['id']
			_topicTitle = _topic['title']
			print ("Deleting topic " + str(_topicId) + ": " + _topicTitle)
			client.delete_topic(topic_id = _topicId)

# ---------------------------------------------------------------------------------------
def changeTopicTimestamp(_topicId, _timestamp):
	#print ("Change topic timestamp: " + str(_topicId) + ", date = " + str(datetime.datetime.fromtimestamp(_timestamp)))
	_response = callRequest(_method = 'PUT',_uri = "/t/" + str(_topicId) + "/change-timestamp.json", _params = {"timestamp": str(_timestamp)})
	#printJson(_response)


# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
# main >>>>>>
initClient(False, False)
initAllTopics(True, False)
createAllTopics(_print = False)
# <<<<<< main
# ---------------------------------------------------------------------------------------

#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "AddMinutes.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "How-to-set-up-an-event-logging-with-Log-Transformations.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "ORIGAM-Architect.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "Work-Queue-Classes.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "Lookups.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "Sequential-Workflows.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "Setup.md", _forceUpdate = True)
#createOrUpdateTopicFromFile(_fileName = SOURCE_DIR + "/" + "Entities.md", _forceUpdate = True)